{"version":3,"file":"flicking.esm.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/MoveType.ts","../src/moves/Snap.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/Flicking.ts","../src/types.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (typeof document === \"undefined\") {\n    return;\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function hasClass(element: HTMLElement | null, className: string): boolean {\n  if (!element) {\n    return false;\n  }\n\n  const classes = classList(element);\n\n  return findIndex(classes, name => name === className) > -1;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  renderExternal: false,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  setLastIndex: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  addPlugins: true,\n  removePlugins: true,\n  isPlaying: true,\n  getLastIndex: true,\n};\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: ClientRect | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    viewport: Viewport,\n  ) {\n    this.viewport = viewport;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\"),\n        style: element.getAttribute(\"style\"),\n      },\n      cachedBbox: null,\n    };\n\n    this.setElement(element);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = this.getBbox();\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: (element: HTMLElement) => any): void {\n    this.getIdenticalPanels()\n      .forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n        eachPanel.unCacheBbox();\n      });\n    this.viewport.resize();\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    const state = this.state;\n    const options = this.viewport.options;\n\n    state.position = pos;\n    if (!state.isVirtual) {\n      const elementStyle = this.element.style;\n      options.horizontal\n        ? elementStyle.left = `${pos}px`\n        : elementStyle.top = `${pos}px`;\n    }\n\n    return this;\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n\n    const cloneElement = isVirtual\n      ? this.element\n      : this.element.cloneNode(true) as HTMLElement;\n\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  // Clone with external element\n  public cloneExternal(cloneIndex: number, element: HTMLElement): Panel {\n    const clonedPanel = this.clone(cloneIndex);\n    clonedPanel.setElement(element);\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode!.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const removingPanels = this.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.removeElement();\n    });\n  }\n\n  private setElement(element: HTMLElement): void {\n    this.element = element;\n\n    const options = this.viewport.options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.removeElement());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.removeElement());\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.removeElement();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (!this.options.renderExternal) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (!this.options.renderExternal) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode()\n      && (nearestPanel.getIndex() === currentPanel.getIndex());\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        eventType: swipeDistance <= minimumDistanceToChange\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n\n    return {\n      panel: panelToMove,\n      destPos: estimatedPosition,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private plugins: Plugin[] = [];\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n            ? DIRECTION.NEXT\n            : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize +  2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    this.resize();\n\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n    if (isFreeScroll && wasEmpty) {\n      this.moveTo(this.currentPanel!, this.findEstimatedPosition(this.currentPanel!), \"\", null, 0);\n    }\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n    }\n\n    this.resize();\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.currentPanel = panelManager.get(status.index)\n      || panelManager.get(defaultIndex)\n      || panelManager.firstPanel();\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel.getOriginalPanel();\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n\n    // Create PanelManager instance\n    this.panelManager = new PanelManager(cameraElement, options);\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (options.renderExternal) {\n      panelManager.setCloneCount(cloneCount);\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const nearestPanel = this.getNearestPanel();\n\n      newPosition = nearestPanel\n        ? nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition\n        : this.getCameraPosition();\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : this.getCameraPosition();\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike, DestroyOption } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.unCacheBbox());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @param diffInfo - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   * @param {HTMLElement[]} [diffInfo.list] - DOM elements list after update.<ko>업데이트 이후 DOM 요소들의 리스트</ko>\n   * @param {number[][]} [diffInfo.maintained] - Index tuple array of DOM elements maintained. Formatted with `[before, after]`.<ko>변경 전후에 유지된 DOM 요소들의 인덱스 튜플 배열. `[이전, 이후]`의 형식을 갖고 있어야 한다.</ko>\n   * @param {number[]} [diffInfo.added] - Index array of DOM elements added to `list`.<ko>`list`에서 추가된 DOM 요소들의 인덱스 배열.</ko>\n   * @param {number[]} [diffInfo.removed] - Index array of DOM elements removed from previous element list.<ko>이전 리스트에서 제거된 DOM 요소들의 인덱스 배열.</ko>\n   */\n  public sync(diffInfo: {\n    list: HTMLElement[],\n    maintained: number[][],\n    added: number[],\n    changed: number[][],\n    removed: number[],\n  }): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const indexRange = panelManager.getRange();\n    const isCircular = this.options.circular;\n\n    // Make sure that new \"list\" should include cloned elements\n    const newOriginalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0; // Make sure it's integer. Same with Math.floor, but faster\n    const newCloneCount = ((list.length / newOriginalPanelCount) >> 0) - 1;\n\n    const prevOriginalPanels = panelManager.originalPanels();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    const newOriginalElements = list.slice(0, newOriginalPanelCount);\n    const newClonedElements = list.slice(newOriginalPanelCount);\n\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(newCloneCount).map(() => []);\n\n    // For maintained panels after external rendering, they should be maintained in newPanels.\n    const originalMaintained = maintained.filter(([beforeIdx, afterIdx]) => beforeIdx <= indexRange.max);\n    // For newly added panels after external rendering, they will be added with their elements.\n    const originalAdded = added.filter(index => index < newOriginalPanelCount);\n\n    originalMaintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    originalAdded.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(newOriginalElements[addIndex], addIndex, viewport);\n    });\n\n    if (isCircular) {\n      counter(newCloneCount).forEach(groupIndex => {\n        const cloneGroupOffset = newOriginalPanelCount * groupIndex;\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        originalMaintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].cloneExternal(groupIndex, newClonedElements[cloneGroupOffset + afterIdx]);\n        });\n\n        originalAdded.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.cloneExternal(groupIndex, newClonedElements[cloneGroupOffset + addIndex]);\n        });\n      });\n    }\n\n    // Replace current info of panels this holds\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([prev, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n\n    panelManager.replacePanels(newPanels, newClones);\n    this.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Flicking from \"./Flicking\";\nimport Viewport from \"./components/Viewport\";\nimport StateMachine from \"./components/StateMachine\";\nimport Panel from \"./components/Panel\";\nimport Component from \"@egjs/component\";\nimport State from \"./states/State\";\n\nexport type ValueOf<T> = T[keyof T];\n/**\n * HTML `string` of single/mutiple HTMLElement, or an instance of `HTMLElement`.\n * @ko 단일/복수의 HTMLElement의 outerHTML에 해당하는 `string`, 혹은 `HTMLElement`의 인스턴스.\n * @typedef\n * @memberof eg.Flicking\n */\nexport type ElementLike = string | HTMLElement;\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n * @property - Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n * @property - Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n * @property - Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n * @property - Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n * @property - A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n * @property - Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n * @property - Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n * @property - Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n * @property - An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n * @property - Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n * @property - Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n * @property - The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n * @property - The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n * @property - Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n * @property - Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n * @property - z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n * @property - Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n * @property - Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n * @property - Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n * @property - Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n * @property - Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n * @property - Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n * @property - Whether to use external rendering. It will delegate DOM manipulation, and can synchronize rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its own states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n */\nexport interface FlickingOptions {\n  classPrefix: string;\n  deceleration: number;\n  horizontal: boolean;\n  circular: boolean;\n  infinite: boolean;\n  infiniteThreshold: number | string;\n  lastIndex: number;\n  threshold: number;\n  duration: number;\n  panelEffect: (x: number) => number;\n  defaultIndex: number;\n  inputType: string[];\n  thresholdAngle: number;\n  bounce: number | string | [number | string, number | string];\n  autoResize: boolean;\n  adaptive: boolean;\n  zIndex: number;\n  bound: boolean;\n  overflow: boolean;\n  hanger: number | string;\n  anchor: number | string;\n  gap: number;\n  moveType: MoveTypeOption;\n  renderExternal: boolean;\n}\n\nexport type MoveTypeObjectOption = MoveTypeSnapOption | MoveTypeFreeScrollOption;\nexport type MoveTypeStringOption = MoveTypeObjectOption[\"type\"];\n\nexport interface MoveTypeContext {\n  viewport: Viewport;\n  axesEvent: {\n    delta: { flick: number };\n    depaPos: { flick: number };\n    destPos: { flick: number };\n    duration: number;\n  };\n  state: State;\n  swipeDistance: number;\n  isNextDirection: boolean;\n}\n\nexport interface DestinationInfo {\n  panel: Panel;\n  destPos: number;\n  duration: number;\n  eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\";\n}\n\n/**\n * Movement style by user input.\n * @ko 사용자 입력에 의한 이동 방식.\n * @typedef {\"snap\" | \"freeScroll\" | eg.Flicking.MoveTypeSnapOption | eg.Flicking.MoveTypeFreeScrollOption}\n * @memberof eg.Flicking\n */\nexport type MoveTypeOption = MoveTypeStringOption | MoveTypeObjectOption;\n\n/**\n * With \"snap\" move type, momentum is applied while choosing destination panel at release time.<br>You can set how many panels can go after relase.\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식.<br>입력 중단 이후 최대 몇 개까지의 패널을 통과하여 이동할지 설정할 수 있다.\n * @typedef\n * @memberof eg.Flicking\n * @property - Should be `\"snap\"` to enable snap mode.<ko>`\"snap\"`을 지정하여 snap 모드를 활성화할 수 있다.</ko>\n * @property {number} [count=1] - Maximum number of panels can go after release.<ko>입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수.</ko>\n */\nexport interface MoveTypeSnapOption {\n  type: \"snap\";\n  count: number;\n}\n\n/**\n * With \"freeScroll\" move type, it can be scrolled freely without alignment.\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식.\n * @typedef\n * @memberof eg.Flicking\n * @property - Should be `\"freeScroll\"` to enable free scroll mode.<ko>`\"freeScroll\"`을 지정하여 free scroll 모드를 활성화할 수 있다.</ko>\n */\nexport interface MoveTypeFreeScrollOption {\n  type: \"freeScroll\";\n}\n\n// State interface to save instance\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - Index of current panel.<ko>현재 패널의 인덱스.</ko>\n * @property panels - Panels Flicking has.<ko>Flicking이 갖고 있는 패널들의 정보.</ko>\n * @property {string} [panels.html] - `outerHTML` of each panel elements.<ko>각 패널 엘리먼트의 `outerHTML`.</ko>\n * @property {index} [panels.index] - Index of each panels.<ko>각 패널의 인덱스.</ko>\n * @property - Camera position of Flicking.<ko>Flicking의 카메라 위치.</ko>\n */\nexport interface FlickingStatus {\n  index: number;\n  panels: Array<{\n    html: string;\n    index: number;\n  }>;\n  position: number;\n}\n\nexport interface OriginalStyle {\n  className: string | null;\n  style: string | null;\n}\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - HTML element of panel object.<ko>패널 오브젝트에 지정된 HTML Element.</ko>\n * @property - Index of panel, zero-based integer.<ko>패널의 인덱스로, 0부터 시작하는 정수.</ko>\n * @property - Position of panel where it is placed from left(horizontal)/top(vertical).<ko>패널의 위치로, 왼쪽(horizontal)/위(vertical)을 기준으로 얼마나 떨어져 있는지를 나타내는 값.</ko>\n * @property - Position of panel anchor where it is actually stopped interacting with hanger position.<ko>Hanger와 상호작용하여 패널에 도착했을 때의 위치를 계산하는데 사용되는 패널 내부 Anchor의 위치.</ko>\n * @property - Size of panel, width(horizontal)/height(vertical) in `px`.<ko>`px`단위의 패널의 크기, horizontal일 때는 너비, vertical일 때는 높이에 해당한다.</ko>\n * @property - Progress of movement between previous or next panel relative to current panel.<ko> 현재 패널로부터 이전/다음 패널으로의 이동 진행률.</ko>\n * @property - Progress of movement between points that panel is completely invisible outside of viewport.(prev direction: -1, selected point: 0, next direction: 1) <ko>현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도.(prev방향: -1, 선택 지점: 0, next방향: 1)</ko>\n * @property - Percentage of area where panel is visible in the viewport.<ko>뷰포트 안에서 패널이 보이는 영역의 비율.</ko>\n * @property focus - Move to this panel.<ko>이 패널로 이동한다.</ko>\n * @property {number} [focus.duration] Duration of the panel movement. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n * @property update - Update panel element with given function.<ko>패널 요소를 주어진 함수를 이용하여 업데이트한다.</ko>\n * @property {function} [update.updateFunction] Callback function to update panel element. argument is panel's element.<ko>패널 요소를 업데이트하기 위한 콜백 함수. 패널의 HTMLElement를 인자로 갖는다.</ko>\n * @property - Return previous panel of current panel, `null` if it doesn't exist.<ko>현재 패널의 이전 패널을 반환한다. 패널이 존재하지 않을 시 `null`을 반환한다.</ko>\n * @property - Return next panel of current panel, `null` if it doesn't exist.<ko>현재 패널의 다음 패널을 반환한다. 패널이 존재하지 않을 시 `null`을 반환한다.</ko>\n * @property - Insert new panels before reference panel. Return inserted panels.<ko>새로운 패널들을 해당 패널 앞에 추가한다. 새로 추가된 패널들을 반환한다.</ko>\n * @property - Insert new panels after reference panel. Return inserted panels.<ko>새로운 패널들을 해당 패널 뒤에 추가한다. 새로 추가된 패널들을 반환한다.</ko>\n * @property - Remove this panel.<ko>이 패널을 제거한다.</ko>\n * @example\n * - **Updating panel**\n * ```javascript\n * // As panel elements can be cloned in circular mode, `element` parameter is provided as read-only.\n * // You should use `update()` function to consistently update all panel elements cloned.\n *\n * // Don't\n * panel.element.classList.add(\"foo\");\n * // Do\n * panel.update(el => {\n *   el.classList.add(\"foo\");\n * });\n * ```\n */\n\nexport interface FlickingPanel {\n  getElement: () => HTMLElement;\n  getIndex: () => number;\n  getPosition: () => number;\n  getAnchorPosition: () => number;\n  getSize: () => number;\n  getProgress: () => number;\n  getOutsetProgress: () => number;\n  getVisibleRatio: () => number;\n  focus: (duration?: number) => void;\n  update: (updateFunction: (element: HTMLElement) => any) => void;\n  prev: () => FlickingPanel | null;\n  next: () => FlickingPanel | null;\n  insertBefore: (element: ElementLike | ElementLike[]) => FlickingPanel[];\n  insertAfter: (element: ElementLike | ElementLike[]) => FlickingPanel[];\n  remove: () => void;\n}\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - ⬅️(horizontal) or ⬆️(vertical).<ko>⬅️(horizontal) 또는 ⬆️(vertical).</ko>\n * @property - ➡️(horizontal) or ⬇️(vertical).<ko>➡️(horizontal) 또는 ⬇️(vertical).</ko>\n */\nexport interface Direction {\n  readonly PREV: \"PREV\";\n  readonly NEXT: \"NEXT\";\n}\n\n/**\n * Event triggered when user started dragging.\n * @ko 사용자가 드래그를 시작했을 떄 발생하는 이벤트\n * @event eg.Flicking#holdStart\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered when user stopped dragging.\n * @ko 사용자가 드래그를 중단했을 때 발생하는 이벤트.\n * @event eg.Flicking#holdEnd\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered once before first [move]{@link eg.Flicking#event:move} event.\n * @ko 첫 번째 [move]{@link eg.Flicking#event:move}이벤트 직전에 단 한번 발생하는 이벤트.\n * @event eg.Flicking#moveStart\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered while moving to the destination panel.\n * @ko 목적 패널로의 이동 도중에 발생하는 이벤트.\n * @event eg.Flicking#move\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered after finish moving to the destination panel.\n * @ko 목적 패널로의 이동을 완료한 다음 발생하는 이벤트.\n * @event eg.Flicking#moveEnd\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered when flicking starts to move to the destination panel.<br>It can be triggered when user finished input, or flicking start to mvoe by method.<br>It won't be triggered when moving to same panel, unless it's circulated more than one cycle in circular mode.<br>Calling `stop()` in event will prevent index changing & panel moving.<br><br>`event` doesn't have `axesEvent` property when triggered by [moveTo()]{@link eg.Flicking#moveTo}, [prev()]{@link eg.Flicking#prev}, [next()]{@link eg.Flicking#next} method.\n * @ko 목적 패널로 이동하기 시작할 때 발생하는 이벤트.<br>사용자가 입력을 마쳤을 때, 혹은 메소드를 통해 이동을 시작했을 때 발생한다.<br>동일 패널로 이동시에는 발생되지 않지만, circular 모드에서 한 바퀴 이상 순환하여 동일 패널로 도착했을 때에도 발생된다.<br>이벤트의 `stop()`을 호출시 패널로의 이동을 막는다.<br><br>[moveTo()]{@link eg.Flicking#moveTo}, [prev()]{@link eg.Flicking#prev}, [next()]{@link eg.Flicking#next}와 같은 메소드에 의해 호출되었을 경우 `event`내의 `axesEvent` 프로퍼티 값은 undefined이다.\n * @event eg.Flicking#change\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered when user drag amount not reached `threshold` in [FlickingOptions]{@link eg.Flicking.FlickingOptions}.\n * @ko 사용자가 드래그한 정도가 [FlickingOptions]{@link eg.Flicking.FlickingOptions}의 `threshold`값보다 작을 때 발생하는 이벤트.\n * @event eg.Flicking#restore\n * @type eg.Flicking.FlickingEvent\n */\n\n/**\n * Event triggered when user statically selected(clicked) panel.\n * @ko 사용자가 패널을 정적으로 선택(클릭)했을 때 발생하는 이벤트.\n * @event eg.Flicking#select\n * @type eg.Flicking.SelectEvent\n */\n\n /**\n  * Event triggered when Flicking confronts panels don't have successive indexes, so it need more content to draw panel in infinite mode.\n  * @ko 무한 모드에서, Flicking이 인덱스가 연속하지 않은 패널들을 만나 새로운 패널이 필요함을 알리고자 할 때 발생시키는 이벤트.\n  * @event eg.Flicking#needPanel\n  * @type eg.Flicking.NeedPanelEvent\n  */\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - holdStart 이벤트\n * @property - holdEnd 이벤트\n * @property - moveStart 이벤트\n * @property - move 이벤트\n * @property - moveEnd 이벤트\n * @property - change 이벤트\n * @property - restore 이벤트\n * @property - select 이벤트\n * @property - needPanel 이벤트\n */\nexport interface EventType {\n  readonly HOLD_START: \"holdStart\";\n  readonly HOLD_END: \"holdEnd\";\n  readonly MOVE_START: \"moveStart\";\n  readonly MOVE: \"move\";\n  readonly MOVE_END: \"moveEnd\";\n  readonly CHANGE: \"change\";\n  readonly RESTORE: \"restore\";\n  readonly SELECT: \"select\";\n  readonly NEED_PANEL: \"needPanel\";\n}\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - Name of the event.<ko>이벤트명</ko>\n * @property - Index number of the current panel.<ko>현재 패널의 인덱스 번호.</ko>\n * @property - Current panel.<ko> 현재 패널.</ko>\n * @property - Absolute progress of how much it proceed from first panel. 0 at first panel, and 1 at last panel.<ko>첫 번째 패널로부터 얼마만큼 진행했는지를 나타내는 진행도. 첫번째 패널에서 0, 마지막 패널에서 1의 값을 갖는다.</ko>\n * @property - `true` when the event was generated by a user action(\"mouse\" or \"touch\") otherwise `false`.<ko>사용자 액션(\"mouse\" 또는 \"touch\")에 의해 이벤트가 생성된 경우 `true`. 그 외는 `false`.</ko>\n * @property - Whether the user is inputting through the input device. (Whether it is 'mousedown' for a mouse device or 'touchmove' for a touch device.)<ko>사용자가 입력 장치를 통해 입력중인지 여부. (마우스 장치라면 'mousedown' 여부, 터치 장치라면 'touchmove' 여부)</ko>\n * @property - Cancel the default action, and prevents every events after it.<br>Not effective with events postfixed with `-End`<ko>이벤트의 기본동작을 취소하고, 해당 이벤트 뒤에 발생할 이벤트들을 전부 발생하지 않도록 한다.<br>`-End`가 접미사로 붙은 이벤트에서는 유효한 동작을 하지 않는다.</ko>\n * @property - Direction of the panel movement. `null` if not moved at all.<ko>패널 이동 방향. 아직 움직이지 않았을 경우 `null`이다.</ko>\n * @property - Original event emitted from {@link https://naver.github.io/egjs-axes/release/latest/doc/ Axes} instance.<ko>내부의 {@link https://naver.github.io/egjs-axes/release/latest/doc Axes} 인스턴스로부터 발생된 원본 이벤트.</ko>\n * @property - Flicking instance that triggered event.<ko>이벤트를 발생시킨 Flicking의 인스턴스</ko>\n */\nexport interface FlickingEvent {\n  type: string;\n  index: number;\n  panel: FlickingPanel | null;\n  progress: number;\n  isTrusted: boolean;\n  holding: boolean;\n  stop: () => void;\n  direction: ValueOf<Direction> | null;\n  axesEvent?: any;\n  currentTarget: Flicking;\n}\n\n/**\n * Event that indicates index will be changed, and isn't restoring. Index will be changed at `moveEnd` event.\n * @ko - `restore`되지 않고, 인덱스가 변경될 것임을 나타내는 이벤트. 실제 인덱스는 `moveEnd`이벤트에서 변경된다.\n * @typedef\n * @memberof eg.Flicking\n * @property - Name of the event.<ko>이벤트명</ko>\n * @property - Expected panel's index that will arrive at animation end.<ko>애니메이션 종료 시점에 도착할 것으로 예측되는 패널의 인덱스.</ko>\n * @property - Expected panel that will arrive at animation end.<ko>애니메이션 종료 시점에 도착할 것으로 예측되는 패널.</ko>\n * @property - Absolute progress of how much it proceed from first panel. 0 at first panel, and 1 at last panel.<ko>첫 번째 패널로부터 얼마만큼 진행했는지를 나타내는 진행도. 첫번째 패널에서 0, 마지막 패널에서 1의 값을 갖는다.</ko>\n * @property - `true` when the event was generated by a user action(\"mouse\" or \"touch\") otherwise `false`.<ko>사용자 액션(\"mouse\" 또는 \"touch\")에 의해 이벤트가 생성된 경우 `true`. 그 외는 `false`.</ko>\n * @property - Whether the user is inputting through the input device. (Whether it is 'mousedown' for a mouse device or 'touchmove' for a touch device.)<ko>사용자가 입력 장치를 통해 입력중인지 여부. (마우스 장치라면 'mousedown' 여부, 터치 장치라면 'touchmove' 여부)</ko>\n * @property - Cancel the default action, and prevents every events after it.<br>Not effective with events postfixed with `-End`<ko>이벤트의 기본동작을 취소하고, 해당 이벤트 뒤에 발생할 이벤트들을 전부 발생하지 않도록 한다.<br>`-End`가 접미사로 붙은 이벤트에서는 유효한 동작을 하지 않는다.</ko>\n * @property - Expected direction of the panel movement.<ko>예측되는 패널 이동 방향.</ko>\n * @property - Original event emitted from {@link https://naver.github.io/egjs-axes/release/latest/doc/ Axes} instance.<ko>내부의 {@link https://naver.github.io/egjs-axes/release/latest/doc Axes} 인스턴스로부터 발생된 원본 이벤트.</ko>\n * @property - Flicking instance that triggered event.<ko>이벤트를 발생시킨 Flicking의 인스턴스</ko>\n */\nexport interface ChangeEvent {\n  type: string;\n  index: number;\n  panel: FlickingPanel | null;\n  progress: number;\n  isTrusted: boolean;\n  holding: boolean;\n  stop: () => void;\n  direction: ValueOf<Direction> | null;\n  axesEvent?: any;\n  currentTarget: Flicking;\n}\n\n/**\n * Event will be triggered when panel is statically click / touched.\n * @ko - 패널이 정적으로 클릭(혹은 터치)되었을 때 발생되는 이벤트.\n * @typedef\n * @memberof eg.Flicking\n * @property - Name of the event.<ko>이벤트명</ko>\n * @property - Selected panel's index.<ko>선택된 패널의 인덱스.</ko>.\n * @property - Selected panel.<ko>선택된 패널.</ko>.\n * @property - Absolute progress of how much it proceed from first panel. 0 at first panel, and 1 at last panel.<ko>첫 번째 패널로부터 얼마만큼 진행했는지를 나타내는 진행도. 첫번째 패널에서 0, 마지막 패널에서 1의 값을 갖는다.</ko>\n * @property - `true` when the event was generated by a user action(\"mouse\" or \"touch\") otherwise `false`.<ko>사용자 액션(\"mouse\" 또는 \"touch\")에 의해 이벤트가 생성된 경우 `true`. 그 외는 `false`.</ko>\n * @property - Whether the user is inputting through the input device. (Whether it is 'mousedown' for a mouse device or 'touchmove' for a touch device.)<ko>사용자가 입력 장치를 통해 입력중인지 여부. (마우스 장치라면 'mousedown' 여부, 터치 장치라면 'touchmove' 여부)</ko>\n * @property - Expected direction of the panel movement.<ko>예측되는 패널 이동 방향.</ko>\n * @property - Original event emitted from {@link https://naver.github.io/egjs-axes/release/latest/doc/ Axes} instance.<ko>내부의 {@link https://naver.github.io/egjs-axes/release/latest/doc Axes} 인스턴스로부터 발생된 원본 이벤트.</ko>\n * @property - Flicking instance that triggered event.<ko>이벤트를 발생시킨 Flicking의 인스턴스</ko>\n */\nexport interface SelectEvent {\n  type: string;\n  index: number;\n  panel: FlickingPanel | null;\n  progress: number;\n  isTrusted: boolean;\n  holding: boolean;\n  direction: ValueOf<Direction> | null;\n  axesEvent?: any;\n  currentTarget: Flicking;\n}\n\n/**\n * Event can be triggered in infinite mode. When camera element reaches at infinite threshold, this event can be triggered to indicate there should be more content to be displayed.\n * @ko - 무한 모드에서 발생될 수 있는 이벤트. 화면의 양 끝, 혹은 불연속적인 인덱스를 가진 패널을 기준으로 `infiniteThreshold`만큼 떨어진 지점에 도달하였을 때 발생될 수 있다.\n * @typedef\n * @memberof eg.Flicking\n * @property - Name of the event.<ko>이벤트명</ko>\n * @property - Index of panel that needs panel before or after.<ko>앞 또는 뒤에 패널이 필요한 패널의 인덱스.</ko>.\n * @property - Reference panel that needs panel before or after it.<ko>앞 또는 뒤에 패널이 필요한 기준 패널.</ko>.\n * @property - Absolute progress of how much it proceed from first panel. 0 at first panel, and 1 at last panel.<ko>첫 번째 패널로부터 얼마만큼 진행했는지를 나타내는 진행도. 첫번째 패널에서 0, 마지막 패널에서 1의 값을 갖는다.</ko>\n * @property - `true` when the event was generated by a user action(\"mouse\" or \"touch\") otherwise `false`.<ko>사용자 액션(\"mouse\" 또는 \"touch\")에 의해 이벤트가 생성된 경우 `true`. 그 외는 `false`.</ko>\n * @property - Whether the user is inputting through the input device. (Whether it is 'mousedown' for a mouse device or 'touchmove' for a touch device.)<ko>사용자가 입력 장치를 통해 입력중인지 여부. (마우스 장치라면 'mousedown' 여부, 터치 장치라면 'touchmove' 여부)</ko>\n * @property - Direction of panel is needed from reference panel. `null` if no panel exists.<ko>기준 패널로부터 패널이 필요한 방향. 패널이 하나도 없을 경우 `null`이다.</ko>\n * @property - Original event emitted from {@link https://naver.github.io/egjs-axes/release/latest/doc/ Axes} instance.<ko>내부의 {@link https://naver.github.io/egjs-axes/release/latest/doc Axes} 인스턴스로부터 발생된 원본 이벤트.</ko>\n * @property - Flicking instance that triggered event.<ko>이벤트를 발생시킨 Flicking의 인스턴스</ko>\n * @property range - Range of indexes that is emtpy.<ko>패널이 존재하지 않는 인덱스의 범위.</ko>\n * @property {number} [range.min] - Minimum index of panels needed.<ko>필요한 패널들의 최소 인덱스.</ko>.\n * @property {number} [range.max] - Maximum index of panels needed.<ko>필요한 패널들의 최대 인덱스.</ko>.\n * @property {number} [range.length] - How many panels are needed to fill empty spaces.<ko>몇 개의 패널이 필요한지를 나타내는 정수.</ko>\n */\nexport interface NeedPanelEvent {\n  type: string;\n  index: number;\n  panel: FlickingPanel | null;\n  progress: number;\n  isTrusted: boolean;\n  holding: boolean;\n  direction: ValueOf<Direction> | null;\n  axesEvent?: any;\n  currentTarget: Flicking;\n  range: {\n    min: number;\n    max: number;\n    length: number;\n  };\n}\n\nexport interface StateType {\n  readonly IDLE: 0;\n  readonly HOLDING: 1;\n  readonly DRAGGING: 2;\n  readonly ANIMATING: 3;\n  readonly DISABLED: 4;\n}\n\nexport interface AxesEventType {\n  readonly HOLD: \"hold\";\n  readonly CHANGE: \"change\";\n  readonly RELEASE: \"release\";\n  readonly ANIMATION_END: \"animationEnd\";\n  readonly FINISH: \"finish\";\n}\n\nexport interface TriggerCallback {\n  onSuccess(callback: () => any): TriggerCallback;\n  onStopped(callback: () => any): TriggerCallback;\n}\n\nexport interface FlickingContext {\n  flicking: Flicking;\n  viewport: Viewport;\n  transitTo: StateMachine[\"transitTo\"];\n  triggerEvent: Flicking[\"triggerEvent\"];\n  moveCamera: Flicking[\"moveCamera\"];\n  stopCamera: Viewport[\"stopCamera\"];\n}\n\n/**\n * @typedef\n * @memberof eg.Flicking\n * @property - Method called when plugin is added.<ko>플러그인을 추가했을 때 발생하는 메소드.</ko>\n * @property - Method called when `resize` or `update` in flicking.<ko>플리킹에서 `resize`가 발생하거나 `update`를 했을 때 발생하는 메소드.</ko>\n * @property - Method called when plugin is removed.<ko>플러그인을 제거했을 때 발생하는 메소드.</ko>\n */\nexport interface Plugin {\n  init(flicking: Flicking): void;\n  update?(flicking: Flicking): void;\n  destroy(flicking: Flicking): void;\n}\n\nexport type ExcludeKeys = keyof Component | \"replace\" | \"append\" | \"remove\" | \"prepend\" | \"sync\" | \"getCloneCount\";\nexport type FlickingMethodsKeys = Exclude<keyof Flicking, ExcludeKeys>;\nexport type FlickingMethods = Pick<Flicking, FlickingMethodsKeys>;\n\nexport interface DestroyOption {\n  preserveUI: boolean;\n}\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","classList","className","split","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","offset","classes","findIndex","originalStyle","setAttribute","removeAttribute","prototype","flickingName","FLICKING_METHODS","args","result","_a","MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","renderExternal","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","setLastIndex","enableInput","disableInput","destroy","resize","setStatus","addPlugins","removePlugins","isPlaying","getLastIndex","TRANSFORM","index","viewport","prevSibling","nextSibling","clonedPanels","state","relativeAnchorPosition","isClone","isVirtual","cloneIndex","getAttribute","cachedBbox","setElement","options","bbox","getBbox","parseArithmeticExpression","panel","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","relativeIndex","floor","getPosition","progress","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","relativePanelPosition","getCameraPosition","outsetProgress","getProgress","panelSize","rightRelativePanelPosition","visibleSize","visibleRatio","currentPanel","hangerPosition","getHangerPosition","anchorPosition","getAnchorPosition","currentPosition","eventType","findEstimatedPosition","updateFunction","getIdenticalPanels","eachPanel","unCacheBbox","currentIndex","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","option","preserveUI","restoreStyle","getBoundingClientRect","original","getClonedPanels","elementStyle","left","top","cloneElement","cloneNode","clonedPanel","Panel","clonedState","parentNode","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","addClass","applyCSS","cameraElement","panels","clones","cloneCount","reduce","allClones","newPanels","newClones","Boolean","filter","lastPanel","firstRemovedPanel","possibleLastPanel","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","concat","reverse","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","reversedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","newClones_1","insertTarget_1","allPanels_1","panelElement","contains","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","map","_this","this_1","insertClones","counter","insertingIndex","fragment_1","createDocumentFragment","appendChild","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","stopCamera","absDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","destPos","nearestPanel","getNearestPanel","stop","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","ctx","findRestorePanelInCircularMode","halfGap","minimumDistanceToChange","originalPanel","getOriginalPanel","firstClonedPanel","lapped","_super","snapCount","eventDelta","calcBrinkOfChange","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","panelPosition","panelNextPosition","panelPrevPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","get","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","estimatedPosition","MoveType","estimatedPanel","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","translate","checkedIndexes","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","build","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","moveVector","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","updatePlugins","minimumDistance","prevPosition","nextPosition","distance","isBetween","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","panInput","enable","disable","updateCheckedIndexes","indexes","wasEmpty","isFreeScroll","newCurrentIndex","getRange","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportStyle","viewportElement","minHeight","minWidth","wrapper","plugins","topmostElement_1","deletingElement","status","clear","html","createPanels","playing","holding","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","startIndex","off","on","axesHandlers","summedPanelSize","handlers","newPlugins","plugin","init","currentPlugins","removedPlugins","changedRange","removed","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","hasClass","cameraCandidate","hasCameraElement","panelElements","child","PanelManager","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","append","indexRange","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","setCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","is","update","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","lastPanelAfterNeed","atLastPanelAfterNeed","cameraPrev","checkingIndex","atFirstPanel","prevIndex","panelLeft","firstPanelAfterNeed","atFirstPanelAfterNeed","params","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","trigger","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","Viewport","listenInput","listenResize","focus","possiblePositions","nearestPosition","current","includeClone","getOutsetProgress","outerHTML","restore","removeEventListener","diffInfo","list","maintained","added","changed","newOriginalPanelCount","newCloneCount","prevOriginalPanels","prevClonedPanels","newOriginalElements","newClonedElements","originalMaintained","beforeIdx","afterIdx","originalAdded","addIndex","groupIndex","cloneGroupOffset","prevCloneGroup","newCloneGroup","cloneExternal","newPanel","getCheckedIndexes","has","replacePanels","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}